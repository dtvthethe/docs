var:
    type scope <name>;

array:
    type[] scope <name>;

mapping:
    mapping(type => type) <name>;

function: 
    function <name> scope view/pure returns (type memory) {

    }

Contract, enum, struct, interface:
    Contract/enum/struct/interface <name> {

    }

    // struct doesn't need scope, "new" keyword
    struct Book { 
      string title;
      string author;
    }
    book = Book('Java', 'Adam');

    // enum start = 0, return type name of struct<name>
    enum Size{ SMALL, MEDIUM, LARGE }
    function getChoice() public view returns (Size) {
      return choice;
    }

    // interface: giống như trong C#

Compare 2 string:
    return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));
    return (a == b); // version >= 0.8.0. Chi phí cao hơn sử dụng keccak256


sope
    private
    public
    internal: bên ngoài ko dùng đc, chỉ các class con có kế thừa ms dùng đc 
 
 storage, memory, calldata:
    storage:
        - Stores data in between function calls
        - The data previously placed on the storage area is accessible to each execution of the smart contract
        - Consumes more gas
        - Holds array, state and local variables of struct
        - có thể thay đổi giá trị (giá trị cha)

    memory:
        - Stores data temporarily
        - Memory is wiped completely once code is executed
        - Has less gas consumption, and better for intermediate calculations
        - Holds Functions argument
        - Không thể thay dổi giá trị (giá trị cha)

    calldata:
        - ko thể thay dổi đc giá trị
        - phí gas rất thấp
        - tốc độ đọc nhanh hơn memory


fallback vs receive:
    - flow:

                    Is msg.data empty? (calldata) 
                            |
                           / \
                        yes   no
                        /      \
        receive() defined?      fallback()
                    / \
                  yes  no
                  /     \
            receive()    fallback()
 
    - cách chạy trên remix IDE: xem hình fallback_receive_remixide.png

delegatecall:
    - thường được sử dụng để triển khai các thư viện
    - cho phép một smart contract gọi đến một hàm trong một smart contract khác và thực thi hàm đó với phạm vi bộ nhớ của smart contract gọi

    library Math {
        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            return c;
        }
    }

    contract MyContract {
        using Math for uint256;
        
        uint256 public value;
        
        function doAdd(uint256 a, uint256 b) public {
            value = value.add(a, b); <<------ 
        }
    }


external vs internal:
    internal:
        - chính nó: OK
        - contract con: OK
        - bên ngoài: NG
        - VD: "_checkOnERC721Received()" // có dấu "_" trc tên hàm
    
    external:
        - chính nó: NG
        - contract con: NG
        - bên ngoài: OK

