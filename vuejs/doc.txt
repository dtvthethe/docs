# TEMPLATE

- giới hạn phạm vi cho css trong 1 component:
	<style scoped>

- kết quả của build đc chứa trong `dist` folder.


- data():
	chứa dữ liệu

- xem list of directive: https://v3.vuejs.org/api/directives.html

- binding:
	1. value binding: {{ .. }}

	2. property binding:
		v-binding:<ten thuoc tinh> = "ten bien"
		or 
		:<ten thuoc tinh> = "ten bien"

	3. style and class binding: giống object chứa key:value
		{key: value, ...}
		key: 
			+ style: tên style css
			+ tên class
		value: 
			+ style: giá trị của style
			+ class: điều kiện có áp dụng class này hay ko


	https://v3.vuejs.org/guide/class-and-style.html#object-syntax-2
	https://v3.vuejs.org/guide/forms.html

- vue model
	update/show data
	v-model="data name"
	or
	:xx="data name"

- vue on: 
	v-on:<event name> = "func name"
	or
	@<event name> = "func name"


# SCRIPT:

- data

- methods

- computed: chạy trước khi dữ liệu đc load

- watch
	theo giõi thay đổi của một biến trong data()
	biến: funciton(newVal, oldVal) {..}

- filter: format data on view
	{{ 123 | currencyFormat }}

	currencyFormat: funciton(input) {
		return ...
	}

- mounted(): khi UI dc mount

- Props: dữ liệu đẩy từ component cah sang component con, trong component con truy cập và sử dụng như biến data thông thường
	https://vi.vuejs.org/v2/guide/components-props.html
	+ App.vue: <Foo :bar="param" />
	+ Child.vue: 
		export default {
			props: [
				'bar',
			]

			or

			props: {
				bar: String,
			}

			or

			props: {
				bar: {
					type: String,
					default: func..
				}
			}
		}


# VUEX
method: func(params)
computed: var
watch: var(params)
getters: var -> map trong computed
mutations: var(params) -> map trong method

- store: trung tâm dữ liệu
	this.$store.state.var...

- getters: 
	get data trong store
	(state, getters)
	
	import { mapGetters } from 'vuex'

	computed: {
	  localComputed () { /* ... */ },
	  ...mapGetters([...]
	}
	
- mutations:
	update data trong store
	(state, payload) 

	mapMutations

- actions:
	kết hợp với mutation (gọi mutation)
	giống mutations nhưng khác là có async
	có thể đặt tên giống vs tên đã khai báo trong mutations
	actions: {
	    increment (context) { // -> { commit }
	      context.commit('increment') // -> tên của mutation
	    }
	 }

	gọi:

	trong component: store.dispatch()
	or
	trong store: commit()
	or
	methods:{
		...mapActions(...),
	}

- get/set  (it dung)
	computed {
		fullNam: {
			get(){...},
			set(newValue) {...}
		}
	}

