<?php

namespace xxxxxxxxxxxx;

use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;


class ExceptionListener implements EventSubscriberInterface
{
    private $twig;

    public function __construct(\Twig_Environment $twig)
    {
        $this->twig = $twig;
    }

    public function onKernelException(GetResponseForExceptionEvent $event)
    {

        $title = '';
        $message = '';
        $statusCode = Response::HTTP_INTERNAL_SERVER_ERROR;
        $exception = $event->getException();

        if ($exception instanceof HttpExceptionInterface) {
            $statusCode = $exception->getStatusCode();
            switch ($statusCode) {
                case 400:
                case 401:
                case 403:
                case 405:
                case 406:
                case 404:
                    // set $title set $message here
                    break;
                default:
                    break;
            }
        }
        
      //TODO: log error here

        try {
            $file = $this->requestContext->isAdmin() ? 'template path' : 'template path'; --> @view/error.twig
            $content = $this->twig->render($file, [
                // pass parameters to view
            ]);
        } catch (\Exception $ignore) {
            $content = $title;
        }
        
        $event->setResponse(Response::create($content, $statusCode));
    }

    public static function getSubscribedEvents()
    {
        return [
            KernelEvents::EXCEPTION => ['onKernelException'],
        ];
    }
}
